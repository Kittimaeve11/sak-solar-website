'use client';

import React, { useEffect, useRef, useState } from 'react';
import { MdOutlineKeyboardArrowDown } from 'react-icons/md';
import styles from '../../Home.module.css';
import { useSearchParams } from 'next/navigation';
import { useLocale } from '@/app/Context/LocaleContext';
import SliderCaptcha from 'rc-slider-captcha';
const baseUrl = process.env.NEXT_PUBLIC_BASE_URL_API;
const apiKey = process.env.NEXT_PUBLIC_AUTHORIZATION_KEY_API;

export default function ContactForm({
  provinces = [],
  amphures = [],
  tambons = [],
  productOptions = [],
}) {
  const { locale } = useLocale();
  const searchParams = useSearchParams();
  const wrapperRef = useRef(null);

  const [formData, setFormData] = useState({
    product: '',
    package: '',
    usageTime: '',
    fullName: '',
    phone: '',
    district: '',
    subDistrict: '',
    province: '',
    contactTime: '',
  });

  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;

    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // ‚úÖ ‡∏•‡∏ö error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
    setErrors((prevErrors) => {
      if (!prevErrors[name]) return prevErrors;
      const updatedErrors = { ...prevErrors };
      delete updatedErrors[name];
      return updatedErrors;
    });
  };

  const validate = () => {
    const newErrors = {};
    if (!formData.product) newErrors.product = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£';
    if (!formData.package) newErrors.package = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à';
    if (!formData.usageTime) newErrors.usageTime = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏ü';
    if (!formData.fullName) newErrors.fullName = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô';
    if (!formData.phone) newErrors.phone = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
    if (!formData.contactTime) newErrors.contactTime = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö';
    if (!formData.province) newErrors.province = '*‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô';
    return newErrors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!captchaVerified) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏î‡πâ‡∏ß‡∏¢ captcha ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°');
      return;
    }

    const validationErrors = validate();
    setErrors(validationErrors);

    if (Object.keys(validationErrors).length === 0) {
      const address = [formData.subDistrict, formData.district, formData.province].filter(Boolean).join(', ');

      const payload = {
        producttypeID: formData.product,
        acceptableprice: formData.package,
        usagetime: formData.usageTime,
        fullname: formData.fullName,
        phonenumber: formData.phone,
        address: address,
        contedtime: formData.contactTime,
        solce: "‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå",
      };

      try {
        const response = await fetch(`${baseUrl}/api/Inquiriespageapi`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": apiKey
          },
          body: JSON.stringify(payload)
        });

        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

        const result = await response.json();
        console.log("üì© ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", result);

        // reset form ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        setFormData({
          product: '',
          package: '',
          usageTime: '',
          fullName: '',
          phone: '',
          district: '',
          subDistrict: '',
          province: '',
          contactTime: '',
        });
        setQuery('');
        setSuggestions([]);
        setCaptchaVerified(false);
      } catch (err) {
        console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      }



      console.log('‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', payload);

      try {
        const response = await fetch(`${baseUrl}/api/Inquiriespageapi`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": apiKey
          },
          body: JSON.stringify(payload)
        });

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
        console.log("üì© ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å API:", result);

        // ‡∏ó‡∏≥ action ‡∏´‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÄ‡∏ä‡πà‡∏ô reset form
        setFormData({
          product: '',
          package: '',
          usageTime: '',
          fullName: '',
          phone: '',
          district: '',
          subDistrict: '',
          province: '',
          contactTime: '',
        });
        setQuery('');
        setSuggestions([]);
      } catch (err) {
        console.error("‚ùå ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", err);
      }
    }
  };


  const handleQueryChange = (e) => {
    const text = e.target.value.trim();
    setQuery(text);

    // ‚úÖ ‡∏•‡∏ö error ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á province ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏°‡πà
    setErrors((prevErrors) => {
      if (!prevErrors.province) return prevErrors;
      const updated = { ...prevErrors };
      delete updated.province;
      return updated;
    });

    if (!text) return setSuggestions([]);

    const matched = [];

    tambons.forEach((t) => {
      if (t.name_th.includes(text)) {
        const amphure = amphures.find((a) => a.id === t.amphure_id);
        const province = provinces.find((p) => p.id === amphure?.province_id);
        matched.push({
          subDistrict: t.name_th,
          district: amphure?.name_th || '',
          province: province?.name_th || '',
        });
      }
    });

    amphures.forEach((a) => {
      if (a.name_th.includes(text)) {
        const province = provinces.find((p) => p.id === a.province_id);
        matched.push({
          subDistrict: '',
          district: a.name_th,
          province: province?.name_th || '',
        });
      }
    });

    provinces.forEach((p) => {
      if (p.name_th.includes(text)) {
        matched.push({
          subDistrict: '',
          district: '',
          province: p.name_th,
        });
      }
    });

    setSuggestions(matched.slice(0, 10));
  };

  const handleSelect = (item) => {
    const fullText = `${item.subDistrict ? item.subDistrict + ', ' : ''}${item.district ? item.district + ', ' : ''}${item.province}`;
    setQuery(fullText);
    setFormData((prev) => ({
      ...prev,
      subDistrict: item.subDistrict,
      district: item.district,
      province: item.province,
    }));
    setSuggestions([]);
  };

  const [captchaVerified, setCaptchaVerified] = useState(false);

  useEffect(() => {
    //  1) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï district ‡πÅ‡∏•‡∏∞ province ‡πÄ‡∏°‡∏∑‡πà‡∏≠ subDistrict ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    const matchedTambon = tambons.find((t) => t.name_th === formData.subDistrict);
    if (matchedTambon) {
      const amphure = amphures.find((a) => a.id === matchedTambon.amphure_id);
      const province = provinces.find((p) => p.id === amphure?.province_id);
      if (amphure && province) {
        setFormData((prev) => ({
          ...prev,
          district: amphure.name_th,
          province: province.name_th,
        }));
      }
    }

    //  2) ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ô‡∏≠‡∏Å suggestion ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î
    const handleClickOutside = (e) => {
      if (wrapperRef.current && !wrapperRef.current.contains(e.target)) {
        setSuggestions([]);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);

    // 3) ‡∏≠‡πà‡∏≤‡∏ô query param "product" ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ + scroll
    const productFromUrl = searchParams.get('product');
    if (productFromUrl) {
      setFormData((prev) => ({
        ...prev,
        product: productFromUrl,
      }));
      setErrors((prevErrors) => {
        const newErrors = { ...prevErrors };
        delete newErrors.product;
        return newErrors;
      });

      const contactSection = document.getElementById('contact');
      if (contactSection) {
        contactSection.scrollIntoView({ behavior: 'smooth' });
      }
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [formData.subDistrict, searchParams, tambons, amphures, provinces]);


  return (
    <div className={styles.containersolar}>
      <div className={styles.formWrapper} style={{ marginTop: '3rem' }}>
        <h1 className="headtitleone">
          ‡∏™‡∏ô‡πÉ‡∏à‡πÇ‡∏ã‡∏•‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏•‡∏•‡πå</h1>
        <h4
          style={{
            textAlign: 'center',
            marginTop: -10,
            marginBottom: 20,
            fontWeight: 400,
          }}
        >
          ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á ‡πÄ‡∏£‡∏≤‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        </h4>


        <form onSubmit={handleSubmit}>
          {/*  ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */}
          <div>
            <label className="form-label">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏ô‡πÉ‡∏à :</label>
            <div className={`radio-group ${errors.product ? 'error-border' : ''}`}>
              {productOptions.map((product) => {
                const productName = locale === 'th' ? product.producttypenameTH : product.producttypenameEN;
                return (
                  <label key={product.producttypeID} className="form-radio">
                    <input
                      type="radio"
                      name="product"
                      value={product.producttypeID}
                      checked={formData.product === product.producttypeID}
                      onChange={handleChange}
                      className="radio-input"
                    />
                    {productName}
                  </label>
                );
              })}

            </div>
            {errors.product && <div className="error-text">{errors.product}</div>}
          </div>

          {/*  ‡πÅ‡∏û‡πá‡∏Ñ‡πÄ‡∏Å‡∏à */}
          <div className="form-select-wrapper">
            <label className="form-label">‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ :</label>
            <div className="custom-select-container" style={{ position: 'relative' }}>
              <select
                id='package'
                name="package"
                value={formData.package}
                onChange={handleChange}
                className={`form-select ${formData.package === '' ? 'placeholder' : ''} ${errors.package ? 'input-error' : ''}`}
              >
                <option value="" disabled hidden>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÑ‡∏î‡πâ**</option>
                <option value="‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î (‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100,000 ‡∏ö‡∏≤‡∏ó)">‡∏õ‡∏£‡∏∞‡∏´‡∏¢‡∏±‡∏î (‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 100,000 ‡∏ö‡∏≤‡∏ó)</option>
                <option value="‡∏Å‡∏•‡∏≤‡∏á (100,000 - 250,000 ‡∏ö‡∏≤‡∏ó)">‡∏Å‡∏•‡∏≤‡∏á (100,000 - 250,000 ‡∏ö‡∏≤‡∏ó)</option>
                <option value="Premium (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 250,000 ‡∏ö‡∏≤‡∏ó)">Premium (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 250,000 ‡∏ö‡∏≤‡∏ó)</option>
                <option value="‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥">‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥</option>
              </select>
              <MdOutlineKeyboardArrowDown className="select-arrow" />
            </div>
            {errors.package && <div className="error-text">{errors.package}</div>}
          </div>

          {/* ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ä‡πâ‡πÑ‡∏ü */}
          <div>
            <label className="form-label">‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏ü :</label>
            <div className={`radio-group ${errors.usageTime ? 'error-border' : ''}`}>
              <label className="form-radio">
                <input
                  id="usageTimeDay"
                  type="radio"
                  name="usageTime"
                  value="‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô"
                  checked={formData.usageTime === '‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô'}
                  onChange={handleChange}
                  className="radio-input"
                />
                ‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô
              </label>
              <label className="form-radio">
                <input
                  id="usageTimeNight"
                  type="radio"
                  name="usageTime"
                  value="‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô"
                  checked={formData.usageTime === '‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô'}
                  onChange={handleChange}
                  className="radio-input"
                />
                ‡∏Å‡∏•‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
              </label>
            </div>
            {errors.usageTime && <div className="error-text">{errors.usageTime}</div>}
          </div>

          {/* üîÜ ‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå */}
          <div>
            <label className="form-label">‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏£‡∏¥‡∏á :</label>
            <input
              id='fullName'
              type="text"
              name="fullName"
              value={formData.fullName}
              onChange={handleChange}
              className={`form-field ${errors.fullName ? 'input-error' : ''}`}
              placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô**"
            />
            {errors.fullName && <div className="error-text">{errors.fullName}</div>}
          </div>

          <div>
            <label className="form-label">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠ :</label>
            <input
              id='contact-phone'
              type="tel"
              name="phone"
              value={formData.phone}
              onChange={handleChange}
              className={`form-field ${errors.phone ? 'input-error' : ''}`}
              placeholder="‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô**"
            />
            {errors.phone && <div className="error-text">{errors.phone}</div>}
          </div>

          {/*  ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà */}
          <div ref={wrapperRef} style={{ position: 'relative' }}>
            <label htmlFor="addressQuery" className="form-label">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà :</label>
            <input
              id="addressQuery"
              type="text"
              value={query}
              onChange={handleQueryChange}
              className={`form-field ${errors.province ? 'input-error' : ''}`}
              placeholder="‡πÄ‡∏ä‡πà‡∏ô (‡∏ï‡∏≥‡∏ö‡∏•)‡∏ó‡πà‡∏≤‡∏≠‡∏¥‡∏ê, (‡∏≠‡∏≥‡πÄ‡∏†‡∏≠)‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå, (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î)‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå"
            />
            {suggestions.length > 0 && (
              <ul className="autocomplete-list">
                {suggestions.map((s, i) => (
                  <li key={i} onClick={() => handleSelect(s)} style={{ padding: '8px', cursor: 'pointer' }}>
                    {`${s.subDistrict ? s.subDistrict + ', ' : ''}${s.district ? s.district + ', ' : ''}${s.province}`}
                  </li>
                ))}
              </ul>
            )}
            {errors.province && <div className="error-text">{errors.province}</div>}
          </div>

          {/*  ‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö */}
          <div className="form-select-wrapper">
            <label className="form-label">‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö :</label>
            <div className="custom-select-container" style={{ position: 'relative' }}>
              <select
                name="contactTime"
                value={formData.contactTime}
                onChange={handleChange}
                className={`form-select ${formData.contactTime === '' ? 'placeholder' : ''} ${errors.contactTime ? 'input-error' : ''}`}
              >
                <option value="" disabled hidden>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö**</option>
                <option value="08:30 ‡∏ô. - 12:00 ‡∏ô.">08:30 ‡∏ô. - 12:00 ‡∏ô.</option>
                <option value="12:00 ‡∏ô. - 13:00 ‡∏ô">12:00 ‡∏ô. - 13:00 ‡∏ô.</option>
                <option value="13:00 ‡∏ô. - 15:00 ‡∏ô.">13:00 ‡∏ô. - 15:00 ‡∏ô.</option>
                <option value="late-15:00 ‡∏ô. - 17:30 ‡∏ô.">15:00 ‡∏ô. - 17:30 ‡∏ô.</option>
                <option value="‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤">‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</option>
              </select>
              <MdOutlineKeyboardArrowDown className="select-arrow" />
            </div>
            {errors.contactTime && <div className="error-text">{errors.contactTime}</div>}
          </div>

          {/* Slider Captcha */}
          {/* <div style={{ margin: '1.5rem 0' }}>
            <SliderCaptcha
              request={async () => {
                // ‚úÖ ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏¥‡πä‡∏Å‡∏ã‡∏≠‡∏ß‡πå‡∏™‡∏∏‡πà‡∏°
                const bgUrl = `https://picsum.photos/400/150?random=${Math.random()}`;
                const puzzleUrl = `https://picsum.photos/50/50?random=${Math.random()}`;
                return { bgUrl, puzzleUrl };
              }}
              onVerify={async (data) => {
                return new Promise((resolve) => {
                  setTimeout(() => {
                    console.log('Captcha solved:', data);
                    setCaptchaVerified(true);
                    resolve(true);
                  }, 500);
                });
              }}
            />

          </div>
 */}
          {/*  ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á */}
          <div className={styles.row} style={{ display: 'flex', justifyContent: 'center' }}>
            <button type="submit" className="buttonSecondaryoneorange">
              ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
